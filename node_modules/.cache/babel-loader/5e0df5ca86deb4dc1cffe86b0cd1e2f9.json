{"ast":null,"code":"var _jsxFileName = \"/home/botree/Desktop/Demoprojects/demoapp/src/components/Add.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { Form, Formik, useField, FieldArray, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { addNews } from '../Actions/Action';\nimport shortid from 'shortid';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MyTextInput = ({\n  label,\n  ...props\n}) => {\n  _s();\n\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id || props.label,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"text-input\",\n      ...field,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      className: \"error\",\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 44\n    }, this) : null]\n  }, void 0, true);\n}; // const MySelect = ({ label, ...props }) => {\n//     const [field, meta] = useField(props);\n//     return (\n//         <div>\n//             <label htmlFor={props.id || props.name}>{label}</label>\n//             <select {...field} {...props} />\n//             {meta.touched && meta.error ? (<div style={{ color: 'red' }} className=\"error\">{meta.error}</div>) : null}\n//         </div>\n//     );\n// }\n\n\n_s(MyTextInput, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c = MyTextInput;\n\nconst Add = () => {\n  _s2();\n\n  // const news = useSelector(state => state.news.news)\n  // console.log(\"news  in add component\", news);\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const adddata = values => {\n    const add = {\n      id: shortid.generate(),\n      title: values.title,\n      author: values.author,\n      name: values.name,\n      publishedAt: values.publishedAt,\n      phnumbers: values.phnumbers\n    };\n    dispatch(addNews(add));\n    history.push('/');\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add News\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        title: '',\n        author: '',\n        name: '',\n        publishedAt: '',\n        // category: '',\n        phnumbers: ['']\n      },\n      validationSchema: Yup.object({\n        title: Yup.string().max(20, 'Must be 15 characters or less').required('Required'),\n        author: Yup.string().max(50, 'Must be 15 characters').required('Required'),\n        name: Yup.string().required('Required'),\n        publishedAt: Yup.string().required('Required') // category: Yup.string()\n        //     .oneOf(\n        //         [\"Software\", \"It\", \"Politics\", \"other\"],\n        //         \"Invalid category Type\"\n        //     )\n        //     .required('Required'),\n\n      }),\n      onSubmit: values => {\n        // alert(JSON.stringify(values))\n        adddata(values);\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        className: \"col-lg-1 col-offset-6 centered\",\n        children: [/*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"Title\",\n          name: \"title\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"Author\",\n          name: \"author\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"Name\",\n          name: \"name\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"PublishedAt\",\n          name: \"publishedAt\",\n          type: \"date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 35\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"List of Numbers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FieldArray, {\n            name: \"phnumbers\",\n            children: fieldArrayProps => {\n              const {\n                push,\n                remove,\n                form\n              } = fieldArrayProps;\n              const {\n                values\n              } = form;\n              const {\n                phnumbers\n              } = values;\n              {\n                /* console.log('field array props', fieldArrayProps) */\n              }\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: phnumbers.map((phnumber, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(Field, {\n                    name: `phnumbers.${index}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 132,\n                    columnNumber: 53\n                  }, this), index > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    onClick: () => remove(index),\n                    children: \"-\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 135,\n                    columnNumber: 61\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    onClick: () => push(''),\n                    children: \"+\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 140,\n                    columnNumber: 53\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 44\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(DatePicke, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          className: \"btn btn-primary\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 62\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 92\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 98\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s2(Add, \"FxNkVwM1QRg2/kU3+RDi4ll7EAM=\", false, function () {\n  return [useDispatch, useHistory];\n});\n\n_c2 = Add;\nexport default Add;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyTextInput\");\n$RefreshReg$(_c2, \"Add\");","map":{"version":3,"sources":["/home/botree/Desktop/Demoprojects/demoapp/src/components/Add.js"],"names":["React","Form","Formik","useField","FieldArray","Field","Yup","Link","useHistory","useDispatch","addNews","shortid","DatePicker","MyTextInput","label","props","field","meta","id","touched","error","color","Add","dispatch","history","adddata","values","add","generate","title","author","name","publishedAt","phnumbers","push","object","string","max","required","fieldArrayProps","remove","form","map","phnumber","index"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Form, Formik, useField, FieldArray, Field } from 'formik'\nimport * as Yup from 'yup'\nimport { Link, useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { addNews } from '../Actions/Action';\nimport shortid from 'shortid';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css'\n\nconst MyTextInput = ({ label, ...props }) => {\n    const [field, meta] = useField(props);\n    return (\n        <>\n            <label htmlFor={props.id || props.label}>{label}</label>\n            <input className=\"text-input\" {...field}{...props} />\n            {meta.touched && meta.error ? (<div style={{ color: 'red' }} className=\"error\">{meta.error}</div>) : null}\n        </>\n    )\n}\n\n// const MySelect = ({ label, ...props }) => {\n//     const [field, meta] = useField(props);\n//     return (\n//         <div>\n//             <label htmlFor={props.id || props.name}>{label}</label>\n//             <select {...field} {...props} />\n//             {meta.touched && meta.error ? (<div style={{ color: 'red' }} className=\"error\">{meta.error}</div>) : null}\n//         </div>\n\n//     );\n// }\n\nconst Add = () => {\n    // const news = useSelector(state => state.news.news)\n    // console.log(\"news  in add component\", news);\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const adddata = (values) => {\n\n        const add = {\n            id: shortid.generate(),\n            title: values.title,\n            author: values.author,\n            name: values.name,\n            publishedAt: values.publishedAt,\n            phnumbers: values.phnumbers\n        }\n        dispatch(addNews(add))\n        history.push('/')\n    }\n    return (\n        <>\n            <h1>Add News</h1>\n            <Formik\n                initialValues={{\n                    title: '',\n                    author: '',\n                    name: '',\n                    publishedAt: '',\n                    // category: '',\n                    phnumbers: ['']\n\n                }}\n                validationSchema={Yup.object({\n                    title: Yup.string()\n                        .max(20, 'Must be 15 characters or less')\n                        .required('Required'),\n                    author: Yup.string()\n                        .max(50, 'Must be 15 characters')\n                        .required('Required'),\n                    name: Yup.string()\n                        .required('Required'),\n                    publishedAt: Yup.string()\n                        .required('Required'),\n                    // category: Yup.string()\n                    //     .oneOf(\n                    //         [\"Software\", \"It\", \"Politics\", \"other\"],\n                    //         \"Invalid category Type\"\n                    //     )\n                    //     .required('Required'),\n\n\n                })}\n                onSubmit={(values) => {\n                    // alert(JSON.stringify(values))\n                    adddata(values)\n                }}\n\n            >\n\n                <Form\n                    className=\"col-lg-1 col-offset-6 centered\">\n                    <MyTextInput\n                        label=\"Title\"\n                        name=\"title\"\n                        type=\"text\"\n                    /><br />\n\n                    <MyTextInput\n                        label=\"Author\"\n                        name=\"author\"\n                        type=\"text\"\n                    /><br />\n\n                    <MyTextInput\n                        label=\"Name\"\n                        name=\"name\"\n                        type=\"text\"\n                    /><br />\n\n                    <MyTextInput\n                        label=\"PublishedAt\"\n                        name=\"publishedAt\"\n                        type=\"date\"\n                    /><br /><br /><br />\n\n                    <div className=\"form-control\">\n                        <label>List of Numbers</label>\n                        <FieldArray name=\"phnumbers\">\n                            {\n                                (fieldArrayProps) => {\n                                    const { push, remove, form } = fieldArrayProps\n                                    const { values } = form\n                                    const { phnumbers } = values\n                                    {/* console.log('field array props', fieldArrayProps) */ }\n                                    return <div>\n                                        {\n                                            phnumbers.map((phnumber, index) => (\n                                                <div key={index}>\n                                                    <Field name={`phnumbers.${index}`} />\n                                                    {\n                                                        index > 0 && (\n                                                            <button type=\"button\"\n                                                                onClick={() => remove(index)}>\n                                                                -\n                                                            </button>)\n                                                    }\n                                                    <button type=\"button\"\n                                                        onClick={() => push('')}>\n                                                        +\n                                                    </button>\n                                                </div>\n                                            ))\n                                        }\n                                    </div>\n\n                                }\n                            }\n                        </FieldArray>\n                    </div>\n\n                    {/* <MySelect label='Category' name='category'>\n                            <option value=\"\">Select a News type</option>\n                            <option value=\"Software\">Software</option>\n                            <option value=\"It\">It</option>\n                            <option value=\"Politics\">Politics</option>\n                            <option value=\"other\">Other</option>\n                        </MySelect><br /> */}\n\n                    <button type=\"submit\">Add</button>\n\n                    <div>\n                        <DatePicke/>\n                    </div>\n                    <Link to='/' className=\"btn btn-primary\"><button>Cancel</button></Link><br /><br />\n                </Form>\n\n            </Formik>\n            <table className=\"table\">\n                {/* <thead>\n                    <tr>\n                        <th scope=\"col\">Title</th>\n                        <th scope=\"col\">Description</th>\n                        <th scope=\"col\">Created_date</th>\n                        <th scope=\"col\">Publisher</th>\n                        <th scope=\"col\">Category</th>\n\n                    </tr>\n                </thead> */}\n                {/* {newsdata.map((data,id) => {\n                    console.log(id)\n                    return (\n\n                        <tr key={id}>\n                            <td>{data.title}</td>\n                            <td>{data.description}</td>\n                            <td>{data.created_date}</td>\n                            <td>{data.publisher}</td>\n                            <td>{data.category}</td>\n                            <Link to = '/edit'></Link><button>Edit</button>\n                            <button>Delete</button>\n\n\n                        </tr>\n                    )\n\n                })} */}\n                <tbody>\n\n                </tbody>\n            </table>\n        </>\n    )\n}\n\nexport default Add\n"]},"metadata":{},"sourceType":"module"}