{"ast":null,"code":"export const ADD_NEWS = 'ADD_NEWS';\nexport const GET_NEWS = 'GET_NEWS';\nexport const DELETE_NEWS = 'DELETE_NEWS';\nexport const FETCH_NEWS_PENDING = 'FETCH_NEWS_PENDING';\nexport const FETCH_NEWS_SUCCESS = 'FETCH_NEWS_SUCCESS';\nexport const FETCH_NEWS_ERROR = 'FETCH_NEWS_ERROR';\nconst initialstate = {\n  loading: false,\n  error: '',\n  newsdata: [],\n  news: []\n};\n\nconst Reducer = (state = initialstate, action) => {\n  switch (action.type) {\n    case ADD_NEWS:\n      console.log('action', action.payload);\n      return {\n        newsdata: [action.payload, ...state.newsdata]\n      };\n\n    case GET_NEWS:\n      console.log('in reducer', action.payload);\n      return { ...state,\n        newsdata: action.payload\n      };\n    // case GET_NEWS:\n    //     console.log(action);\n    //     let arr  = state.newsdata.filter(news => {\n    //         console.log('news', news);\n    //     })\n    //     arr = arr.values();\n    //     for(let val of arr){\n    //         arr = val\n    //     }\n    //     return{\n    //         ...state,\n    //         news: arr\n    //     }\n\n    case DELETE_NEWS:\n      console.log('action', action);\n      return { ...state,\n        newsdata: state.newsdata.filter(news => news.id !== action.payload // console.log('news', news.id)\n        )\n      };\n\n    case FETCH_NEWS_PENDING:\n      return { ...state,\n        loading: true\n      };\n\n    case FETCH_NEWS_SUCCESS:\n      return { ...state,\n        loading: false,\n        news: action.payload\n      };\n\n    case FETCH_NEWS_ERROR:\n      return { ...state,\n        loading: false,\n        error: action.error\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = Reducer;\nexport default Reducer;\nexport const getNews = state => state.newsdata;\nexport const getNewsPending = state => state.loading;\nexport const getNewsError = state => state.error;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reducer\");","map":{"version":3,"sources":["/home/botree/Desktop/Demoprojects/demoapp/src/redux/Reducers/Reducer.js"],"names":["ADD_NEWS","GET_NEWS","DELETE_NEWS","FETCH_NEWS_PENDING","FETCH_NEWS_SUCCESS","FETCH_NEWS_ERROR","initialstate","loading","error","newsdata","news","Reducer","state","action","type","console","log","payload","filter","id","getNews","getNewsPending","getNewsError"],"mappings":"AACA,OAAO,MAAMA,QAAQ,GAAG,UAAjB;AACP,OAAO,MAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AAEP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAGP,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,KAAK,EAAE,EAFU;AAGjBC,EAAAA,QAAQ,EAAE,EAHO;AAIjBC,EAAAA,IAAI,EAAE;AAJW,CAArB;;AAOA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKd,QAAL;AACIe,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,MAAM,CAACI,OAA7B;AAEA,aAAO;AACHR,QAAAA,QAAQ,EAAE,CAACI,MAAM,CAACI,OAAR,EAAiB,GAAGL,KAAK,CAACH,QAA1B;AADP,OAAP;;AAKJ,SAAKR,QAAL;AACIc,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,MAAM,CAACI,OAAjC;AACA,aAAO,EACH,GAAGL,KADA;AAEHH,QAAAA,QAAQ,EAAEI,MAAM,CAACI;AAFd,OAAP;AAMJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,SAAKf,WAAL;AACIa,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,MAAtB;AAEA,aAAO,EACH,GAAGD,KADA;AAEHH,QAAAA,QAAQ,EAAEG,KAAK,CAACH,QAAN,CAAeS,MAAf,CAAsBR,IAAI,IAChCA,IAAI,CAACS,EAAL,KAAYN,MAAM,CAACI,OADb,CAEN;AAFM;AAFP,OAAP;;AAQJ,SAAKd,kBAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHL,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAIJ,SAAKH,kBAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHL,QAAAA,OAAO,EAAE,KAFN;AAGHG,QAAAA,IAAI,EAAEG,MAAM,CAACI;AAHV,OAAP;;AAKJ,SAAKZ,gBAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHL,QAAAA,OAAO,EAAE,KAFN;AAGHC,QAAAA,KAAK,EAAEK,MAAM,CAACL;AAHX,OAAP;;AAMJ;AACI,aAAOI,KAAP;AA9DR;AAgEH,CAjED;;KAAMD,O;AAmEN,eAAeA,OAAf;AACA,OAAO,MAAMS,OAAO,GAAGR,KAAK,IAAIA,KAAK,CAACH,QAA/B;AACP,OAAO,MAAMY,cAAc,GAAGT,KAAK,IAAIA,KAAK,CAACL,OAAtC;AACP,OAAO,MAAMe,YAAY,GAAGV,KAAK,IAAIA,KAAK,CAACJ,KAApC","sourcesContent":["\nexport const ADD_NEWS = 'ADD_NEWS'\nexport const GET_NEWS = 'GET_NEWS'\nexport const DELETE_NEWS = 'DELETE_NEWS'\n\nexport const FETCH_NEWS_PENDING = 'FETCH_NEWS_PENDING';\nexport const FETCH_NEWS_SUCCESS = 'FETCH_NEWS_SUCCESS';\nexport const FETCH_NEWS_ERROR = 'FETCH_NEWS_ERROR';\n\n\nconst initialstate = {\n    loading: false,\n    error: '',\n    newsdata: [],\n    news: []\n}\n\nconst Reducer = (state = initialstate, action) => {\n    switch (action.type) {\n        case ADD_NEWS:\n            console.log('action', action.payload);\n\n            return {\n                newsdata: [action.payload, ...state.newsdata],\n\n            }\n\n        case GET_NEWS:\n            console.log('in reducer', action.payload);\n            return {\n                ...state,\n                newsdata: action.payload\n            }\n\n\n        // case GET_NEWS:\n        //     console.log(action);\n        //     let arr  = state.newsdata.filter(news => {\n        //         console.log('news', news);\n        //     })\n        //     arr = arr.values();\n        //     for(let val of arr){\n        //         arr = val\n        //     }\n        //     return{\n        //         ...state,\n        //         news: arr\n\n        //     }\n\n        case DELETE_NEWS:\n            console.log('action', action);\n\n            return {\n                ...state,\n                newsdata: state.newsdata.filter(news =>\n                    news.id !== action.payload ,\n                    // console.log('news', news.id)\n                )\n            }\n\n        case FETCH_NEWS_PENDING:\n            return {\n                ...state,\n                loading: true\n            }\n        case FETCH_NEWS_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                news: action.payload\n            }\n        case FETCH_NEWS_ERROR:\n            return {\n                ...state,\n                loading: false,\n                error: action.error\n            }\n\n        default:\n            return state\n    }\n}\n\nexport default Reducer\nexport const getNews = state => state.newsdata;\nexport const getNewsPending = state => state.loading;\nexport const getNewsError = state => state.error;\n"]},"metadata":{},"sourceType":"module"}