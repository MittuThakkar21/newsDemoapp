{"ast":null,"code":"var _jsxFileName = \"/home/botree/Desktop/Demoprojects/demoapp/src/components/Add.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { Form, Formik, useField, FieldArray } from 'formik';\nimport * as Yup from 'yup';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addNews } from '../redux/Action';\nimport shortid from 'shortid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MyTextInput = ({\n  label,\n  ...props\n}) => {\n  _s();\n\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id || props.label,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"text-input\",\n      ...field,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      className: \"error\",\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 44\n    }, this) : null]\n  }, void 0, true);\n}; // const MySelect = ({ label, ...props }) => {\n//     const [field, meta] = useField(props);\n//     return (\n//         <div>\n//             <label htmlFor={props.id || props.name}>{label}</label>\n//             <select {...field} {...props} />\n//             {meta.touched && meta.error ? (<div style={{ color: 'red' }} className=\"error\">{meta.error}</div>) : null}\n//         </div>\n//     );\n// }\n\n\n_s(MyTextInput, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c = MyTextInput;\n\nconst Add = () => {\n  _s2();\n\n  const news = useSelector(state => state.news.news);\n  console.log(\"news  in add component\", news);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add News\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        title: '',\n        author: '',\n        name: '',\n        publishedAt: '',\n        // category: '',\n        phnumbers: ['']\n      },\n      validationSchema: Yup.object({\n        title: Yup.string().max(20, 'Must be 15 characters or less').required('Required'),\n        author: Yup.string().max(50, 'Must be 15 characters').required('Required'),\n        name: Yup.string().required('Required'),\n        publishedAt: Yup.string().required('Required') // category: Yup.string()\n        //     .oneOf(\n        //         [\"Software\", \"It\", \"Politics\", \"other\"],\n        //         \"Invalid category Type\"\n        //     )\n        //     .required('Required'),\n\n      }),\n      onSubmit: values => {\n        alert(JSON.stringify(values));\n        dispatch(addNews(values));\n        history.push('/');\n      } // render={({ values, Field }) => (\n      //     <div className=\"form-control\">\n      //         <label>List of Phone Numbers</label>\n      //         <FieldArray name='phnumbers'\n      //             render={arrayHelpers => (\n      //                 <div>\n      //                     {\n      //                         values.phnumbers && values.phnumbers.length > 0 ? (\n      //                             values.phnumbers.map((number, index) => (\n      //                                 <div key={index}>\n      //                                     <Field name={`friends.${index}`} />\n      //                                     <button type=\"button\"\n      //                                         onClick={() => arrayHelpers.remove(index)}\n      //                                     >\n      //                                         -\n      //                                </button>\n      //                                     <button type=\"button\"\n      //                                         onClick={() => arrayHelpers.insert(index, '')}\n      //                                     >\n      //                                         +\n      //                                </button>\n      //                                 </div>\n      //                             ))\n      //                         ) : (\n      //                             <button type=\"button\"\n      //                                 onClick={() => arrayHelpers.push('')}\n      //                             >\n      //                                 Add  number\n      //                             </button>\n      //                         )\n      //                     }\n      //                 </div>\n      //             )}\n      //         >\n      //         </FieldArray>\n      //     </div>\n      // )}\n      ,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        className: \"col-lg-1 col-offset-6 centered\",\n        children: [/*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"Title\",\n          name: \"title\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"Author\",\n          name: \"author\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"Name\",\n          name: \"name\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"PublishedAt\",\n          name: \"publishedAt\",\n          type: \"date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 35\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"reset\",\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), \",\", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          className: \"btn btn-primary\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 66\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 96\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 102\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s2(Add, \"foFisZJH7rotZvrvQckANZvez9k=\", false, function () {\n  return [useSelector, useDispatch, useHistory];\n});\n\n_c2 = Add;\nexport default Add;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyTextInput\");\n$RefreshReg$(_c2, \"Add\");","map":{"version":3,"sources":["/home/botree/Desktop/Demoprojects/demoapp/src/components/Add.js"],"names":["React","Form","Formik","useField","FieldArray","Yup","Link","useHistory","useDispatch","useSelector","addNews","shortid","MyTextInput","label","props","field","meta","id","touched","error","color","Add","news","state","console","log","dispatch","history","title","author","name","publishedAt","phnumbers","object","string","max","required","values","alert","JSON","stringify","push"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Form, Formik, useField, FieldArray } from 'formik'\nimport * as Yup from 'yup'\nimport { Link, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addNews } from '../redux/Action';\nimport shortid from 'shortid'\n\nconst MyTextInput = ({ label, ...props }) => {\n    const [field, meta] = useField(props);\n    return (\n        <>\n            <label htmlFor={props.id || props.label}>{label}</label>\n            <input className=\"text-input\" {...field} {...props} />\n            {meta.touched && meta.error ? (<div style={{ color: 'red' }} className=\"error\">{meta.error}</div>) : null}\n        </>\n    )\n}\n\n// const MySelect = ({ label, ...props }) => {\n//     const [field, meta] = useField(props);\n//     return (\n//         <div>\n//             <label htmlFor={props.id || props.name}>{label}</label>\n//             <select {...field} {...props} />\n//             {meta.touched && meta.error ? (<div style={{ color: 'red' }} className=\"error\">{meta.error}</div>) : null}\n//         </div>\n\n//     );\n// }\n\nconst Add = () => {\n    const news = useSelector(state => state.news.news)\n    console.log(\"news  in add component\", news);\n    const dispatch = useDispatch();\n    const history = useHistory();\n    return (\n        <>\n            <h1>Add News</h1>\n            <Formik\n                initialValues={{\n                    title: '',\n                    author: '',\n                    name: '',\n                    publishedAt: '',\n                    // category: '',\n                    phnumbers: ['']\n\n                }}\n                validationSchema={Yup.object({\n                    title: Yup.string()\n                        .max(20, 'Must be 15 characters or less')\n                        .required('Required'),\n                    author: Yup.string()\n                        .max(50, 'Must be 15 characters')\n                        .required('Required'),\n                    name: Yup.string()\n                        .required('Required'),\n                    publishedAt: Yup.string()\n                        .required('Required'),\n                    // category: Yup.string()\n                    //     .oneOf(\n                    //         [\"Software\", \"It\", \"Politics\", \"other\"],\n                    //         \"Invalid category Type\"\n                    //     )\n                    //     .required('Required'),\n\n\n                })}\n                onSubmit={(values) => {\n                    alert(JSON.stringify(values))\n                    dispatch(addNews(values))\n                    history.push('/')\n                }}\n\n                // render={({ values, Field }) => (\n                //     <div className=\"form-control\">\n                //         <label>List of Phone Numbers</label>\n                //         <FieldArray name='phnumbers'\n                //             render={arrayHelpers => (\n                //                 <div>\n                //                     {\n                //                         values.phnumbers && values.phnumbers.length > 0 ? (\n                //                             values.phnumbers.map((number, index) => (\n                //                                 <div key={index}>\n                //                                     <Field name={`friends.${index}`} />\n                //                                     <button type=\"button\"\n                //                                         onClick={() => arrayHelpers.remove(index)}\n                //                                     >\n                //                                         -\n\n                //                                </button>\n                //                                     <button type=\"button\"\n                //                                         onClick={() => arrayHelpers.insert(index, '')}\n                //                                     >\n                //                                         +\n\n                //                                </button>\n                //                                 </div>\n                //                             ))\n                //                         ) : (\n                //                             <button type=\"button\"\n                //                                 onClick={() => arrayHelpers.push('')}\n                //                             >\n                //                                 Add  number\n                //                             </button>\n                //                         )\n                //                     }\n                //                 </div>\n\n                //             )}\n                //         >\n\n\n\n                //         </FieldArray>\n                //     </div>\n                // )}\n            >\n\n\n                <Form\n                    className=\"col-lg-1 col-offset-6 centered\">\n                    <MyTextInput\n                        label=\"Title\"\n                        name=\"title\"\n                        type=\"text\"\n                    /><br />\n\n                    <MyTextInput\n                        label=\"Author\"\n                        name=\"author\"\n                        type=\"text\"\n                    /><br />\n\n                    <MyTextInput\n                        label=\"Name\"\n                        name=\"name\"\n                        type=\"text\"\n                    /><br />\n\n                    <MyTextInput\n                        label=\"PublishedAt\"\n                        name=\"publishedAt\"\n                        type=\"date\"\n                    /><br /><br /><br />\n\n                    {/* <MySelect label='Category' name='category'>\n                            <option value=\"\">Select a News type</option>\n                            <option value=\"Software\">Software</option>\n                            <option value=\"It\">It</option>\n                            <option value=\"Politics\">Politics</option>\n                            <option value=\"other\">Other</option>\n                        </MySelect><br /> */}\n\n\n\n\n                    <button type=\"submit\">Add</button>\n                    <button type=\"reset\">Reset</button>,\n                        <Link to='/' className=\"btn btn-primary\"><button>Cancel</button></Link><br /><br />\n                </Form>\n\n            </Formik>\n            <table className=\"table\">\n                {/* <thead>\n                    <tr>\n                        <th scope=\"col\">Title</th>\n                        <th scope=\"col\">Description</th>\n                        <th scope=\"col\">Created_date</th>\n                        <th scope=\"col\">Publisher</th>\n                        <th scope=\"col\">Category</th>\n\n                    </tr>\n                </thead> */}\n                {/* {newsdata.map((data,id) => {\n                    console.log(id)\n                    return (\n\n\n                        <tr key={id}>\n                            <td>{data.title}</td>\n                            <td>{data.description}</td>\n                            <td>{data.created_date}</td>\n                            <td>{data.publisher}</td>\n                            <td>{data.category}</td>\n                            <Link to = '/edit'></Link><button>Edit</button>\n                            <button>Delete</button>\n\n\n                        </tr>\n                    )\n\n                })} */}\n                <tbody>\n\n                </tbody>\n            </table>\n        </>\n    )\n}\n\nexport default Add\n"]},"metadata":{},"sourceType":"module"}