{"ast":null,"code":"var _jsxFileName = \"/home/botree/Desktop/Demoprojects/demoapp/src/components/Edit.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Form, Formik, useField, FieldArray, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { getNews, updateNews } from '../Actions/Action';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MyTextInput = ({\n  label,\n  ...props\n}) => {\n  _s();\n\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id || props.label,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"text-input\",\n      ...field,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), \".\", meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      className: \"error\",\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 44\n    }, this) : null]\n  }, void 0, true);\n}; // const MySelect = ({ label, ...props }) => {\n//     const [field, meta] = useField(props);\n//     return (\n//         <div>\n//             <label htmlFor={props.id || props.name}>{label}</label>\n//             <select {...field} {...props} />\n//             {meta.touched && meta.error ? (<div style={{ color: 'red' }} className=\"error\">{meta.error}</div>) : null}\n//         </div>\n//     );\n// }\n\n\n_s(MyTextInput, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c = MyTextInput;\n\nconst Edit = ({\n  location\n}) => {\n  _s2();\n\n  const news = location.news; // console.log(\"in edit component\", news);\n\n  const {\n    id\n  } = useParams(); // alert(id)\n\n  const {\n    title,\n    author,\n    name,\n    publishedAt,\n    phnumbers,\n    nid\n  } = news || {};\n  const dispatch = useDispatch();\n  const history = useHistory();\n  useEffect(() => {\n    dispatch(getNews(id));\n  }, []);\n\n  const onUpdate = values => {\n    // console.log('values', values);\n    const updated_data = {\n      id: nid,\n      title: values.title,\n      author: values.author,\n      name: values.name,\n      publishedAt: values.publishedAt,\n      phnumbers: values.phnumbers\n    }; // console.log('updated_data', updated_data);\n\n    dispatch(updateNews(updated_data));\n    history.push('/');\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Edit News\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        title: title,\n        author: author,\n        name: name,\n        publishedAt: moment(publishedAt).format('YYYY-MM-DD'),\n        phnumbers: phnumbers\n      },\n      validationSchema: Yup.object({\n        title: Yup.string().required('Required'),\n        author: Yup.string().max(50, 'Must be 15 characters').required('Required'),\n        name: Yup.string().required('Required'),\n        publishedAt: Yup.string().required('Required') // category: Yup.string()\n        //     .oneOf(\n        //         [\"Software\", \"It\", \"Politics\", \"other\"],\n        //         \"Invalid category Type\"\n        //     )\n        //     .required('Required'),\n\n      }),\n      onSubmit: values => {\n        alert(JSON.stringify(values));\n        onUpdate(values);\n      },\n      children: props => /*#__PURE__*/_jsxDEV(Form, {\n        className: \"col-lg-1 col-offset-6 centered\",\n        children: [/*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"Title\",\n          name: \"title\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"Author\",\n          name: \"author\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"Name\",\n          name: \"name\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"PublishedAt\",\n          name: \"publishedAt\",\n          type: \"date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 39\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"List of Numbers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(FieldArray, {\n            name: \"phnumbers\",\n            children: fieldArrayProps => {\n              const {\n                push,\n                remove,\n                form\n              } = fieldArrayProps;\n              const {\n                values\n              } = form;\n              const {\n                phnumbers\n              } = values;\n              {\n                /* console.log('field array props', fieldArrayProps) */\n              }\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: phnumbers.map((phnumber, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(Field, {\n                    name: `phnumbers.${index}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 139,\n                    columnNumber: 57\n                  }, this), index > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    onClick: () => remove(index),\n                    children: \"-\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 142,\n                    columnNumber: 65\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    onClick: () => push(''),\n                    children: \"+\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 150,\n                    columnNumber: 57\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 53\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 48\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          className: \"btn btn-primary\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 66\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 96\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 102\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s2(Edit, \"B7netXsQFJnp8DZJjrrifuwXUmU=\", false, function () {\n  return [useParams, useDispatch, useHistory];\n});\n\n_c2 = Edit;\nexport default Edit;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyTextInput\");\n$RefreshReg$(_c2, \"Edit\");","map":{"version":3,"sources":["/home/botree/Desktop/Demoprojects/demoapp/src/components/Edit.js"],"names":["React","useEffect","Form","Formik","useField","FieldArray","Field","Yup","Link","useHistory","useParams","useDispatch","getNews","updateNews","moment","MyTextInput","label","props","field","meta","id","touched","error","color","Edit","location","news","title","author","name","publishedAt","phnumbers","nid","dispatch","history","onUpdate","values","updated_data","push","format","object","string","required","max","alert","JSON","stringify","fieldArrayProps","remove","form","map","phnumber","index"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { Form, Formik, useField, FieldArray, Field } from 'formik'\nimport * as Yup from 'yup'\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { getNews, updateNews } from '../Actions/Action';\nimport moment from 'moment';\n\nconst MyTextInput = ({ label, ...props }) => {\n    const [field, meta] = useField(props);\n    return (\n        <>\n            <label htmlFor={props.id || props.label}>{label}</label>\n            <input className=\"text-input\" {...field} {...props} />.\n            {meta.touched && meta.error ? (<div style={{ color: 'red' }} className=\"error\">{meta.error}</div>) : null}\n        </>\n    )\n}\n// const MySelect = ({ label, ...props }) => {\n//     const [field, meta] = useField(props);\n//     return (\n//         <div>\n//             <label htmlFor={props.id || props.name}>{label}</label>\n//             <select {...field} {...props} />\n//             {meta.touched && meta.error ? (<div style={{ color: 'red' }} className=\"error\">{meta.error}</div>) : null}\n//         </div>\n\n//     );\n// }\n\nconst Edit = ({ location }) => {\n    const news = location.news\n    // console.log(\"in edit component\", news);\n    const { id } = useParams();\n    // alert(id)\n\n    const { title, author, name, publishedAt, phnumbers, nid } = news || {}\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    useEffect(() => {\n        dispatch(getNews(id))\n    }, [])\n\n    const onUpdate = (values) => {\n        // console.log('values', values);\n        const updated_data = {\n            id: nid,\n            title: values.title,\n            author: values.author,\n            name: values.name,\n            publishedAt: values.publishedAt,\n            phnumbers: values.phnumbers\n        }\n        // console.log('updated_data', updated_data);\n        dispatch(updateNews(updated_data))\n        history.push('/')\n    }\n\n    return (\n        <>\n            <h1>Edit News</h1>\n            <Formik\n                initialValues={{\n                    title: title,\n                    author: author,\n                    name: name,\n                    publishedAt: moment(publishedAt).format('YYYY-MM-DD'),\n                    phnumbers: phnumbers\n\n                }}\n                validationSchema={Yup.object({\n                    title: Yup.string()\n                        .required('Required'),\n                    author: Yup.string()\n                        .max(50, 'Must be 15 characters')\n                        .required('Required'),\n                    name: Yup.string()\n                        .required('Required'),\n                    publishedAt: Yup.string()\n                        .required('Required'),\n                    // category: Yup.string()\n                    //     .oneOf(\n                    //         [\"Software\", \"It\", \"Politics\", \"other\"],\n                    //         \"Invalid category Type\"\n                    //     )\n                    //     .required('Required'),\n\n\n                })}\n                onSubmit={(values) => {\n                    alert(JSON.stringify(values))\n                    onUpdate(values)\n                }}\n            >\n                {props => (\n\n                    <Form\n                        className=\"col-lg-1 col-offset-6 centered\">\n                        <MyTextInput\n                            label=\"Title\"\n                            name=\"title\"\n                            type=\"text\"\n\n                        /><br />\n\n                        <MyTextInput\n                            label=\"Author\"\n                            name=\"author\"\n                            type=\"text\"\n                        /><br />\n\n                        <MyTextInput\n                            label=\"Name\"\n                            name=\"name\"\n                            type=\"text\"\n                        /><br />\n\n                        <MyTextInput\n                            label=\"PublishedAt\"\n                            name=\"publishedAt\"\n                            type=\"date\"\n                        /><br /><br /><br />\n\n                        <div>\n                            <label>List of Numbers</label>\n                            <FieldArray name=\"phnumbers\">\n                                {\n                                    (fieldArrayProps) => {\n                                        const { push, remove, form } = fieldArrayProps\n                                        const { values } = form\n                                        const { phnumbers } = values\n                                        {/* console.log('field array props', fieldArrayProps) */ }\n                                        return <div>\n                                            {\n                                                phnumbers.map((phnumber, index) => (\n                                                    <div key={index}>\n                                                        <Field name={`phnumbers.${index}`} />\n                                                        {\n                                                            index > 0 && (\n                                                                <button type=\"button\"\n                                                                    onClick={() => remove(index)}>\n                                                                    -\n                                                                </button>\n\n                                                            )\n                                                        }\n\n                                                        <button type=\"button\"\n                                                            onClick={() => push('')}>\n                                                            +\n                                                        </button>\n                                                    </div>\n                                                ))\n                                            }\n                                        </div>\n                                    }\n                                }\n                            </FieldArray>\n                        </div>\n\n                        {/* <MySelect label='Category' name='category'>\n                            <option value=\"\">Select a News type</option>\n                            <option value=\"Software\">Software</option>\n                            <option value=\"It\">It</option>\n                            <option value=\"Politics\">Politics</option>\n                            <option value=\"other\">Other</option>\n                        </MySelect><br /> */}\n\n                        <button type=\"submit\">Update</button>\n                        <Link to='/' className=\"btn btn-primary\"><button>Cancel</button></Link><br /><br />\n                    </Form>\n                )}\n            </Formik>\n            <table className=\"table\">\n                {/* <thead>\n                    <tr>\n                        <th scope=\"col\">Title</th>\n                        <th scope=\"col\">Description</th>\n                        <th scope=\"col\">Created_date</th>\n                        <th scope=\"col\">Publisher</th>\n                        <th scope=\"col\">Category</th>\n\n                    </tr>\n                </thead> */}\n                {/* {newsdata.map((data,id) => {\n                    console.log(id)\n                    return (\n\n\n                        <tr key={id}>\n                            <td>{data.title}</td>\n                            <td>{data.description}</td>\n                            <td>{data.created_date}</td>\n                            <td>{data.publisher}</td>\n                            <td>{data.category}</td>\n                            <Link to = '/edit'></Link><button>Edit</button>\n                            <button>Delete</button>\n\n\n                        </tr>\n                    )\n\n                })} */}\n                <tbody>\n\n                </tbody>\n            </table>\n        </>\n    )\n}\n\n\n\nexport default Edit\n"]},"metadata":{},"sourceType":"module"}