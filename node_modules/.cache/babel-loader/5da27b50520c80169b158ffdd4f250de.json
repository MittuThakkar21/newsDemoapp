{"ast":null,"code":"var _jsxFileName = \"/home/botree/Desktop/Demoprojects/demoapp/src/components/Edit.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Field, Form, Formik, useField } from 'formik';\nimport * as Yup from 'yup';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { useDispatch, connect } from 'react-redux';\nimport { addNews, getNews } from '../redux/Action'; // import { useEffect } from 'react';\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MyTextInput = ({\n  label,\n  ...props\n}) => {\n  _s();\n\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id || props.label,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"text-input\",\n      ...field,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), \".\", meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      className: \"error\",\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 44\n    }, this) : null]\n  }, void 0, true);\n}; // const MySelect = ({ label, ...props }) => {\n//     const [field, meta] = useField(props);\n//     return (\n//         <div>\n//             <label htmlFor={props.id || props.name}>{label}</label>\n//             <select {...field} {...props} />\n//             {meta.touched && meta.error ? (<div style={{ color: 'red' }} className=\"error\">{meta.error}</div>) : null}\n//         </div>\n//     );\n// }\n\n\n_s(MyTextInput, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c = MyTextInput;\n\nconst Edit = ({\n  newsinfo,\n  getNews\n}) => {\n  _s2();\n\n  // const newsinfo = useSelector(state => state.newsinfo)\n  console.log(\"news  in add component\", newsinfo);\n  const {\n    id\n  } = useParams(); // const {title, author,name, publishedAt} = newsinfo\n  // console.log('title is',title);\n\n  console.log('id from params', id);\n  const dispatch = useDispatch();\n  const history = useHistory(); // console.log('props value',props);\n  // console.log('fields', field);\n\n  useEffect(() => {\n    if (newsinfo != null) {\n      console.log('newsinfo', newsinfo);\n    }\n\n    dispatch(getNews(id));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Edit News\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        title: '',\n        author: '',\n        name: '',\n        publishedAt: '' // category: ''\n\n      },\n      validationSchema: Yup.object({\n        title: Yup.string().max(20, 'Must be 15 characters or less').required('Required'),\n        author: Yup.string().max(50, 'Must be 15 characters').required('Required'),\n        name: Yup.string().required('Required'),\n        publishedAt: Yup.string().required('Required') // category: Yup.string()\n        //     .oneOf(\n        //         [\"Software\", \"It\", \"Politics\", \"other\"],\n        //         \"Invalid category Type\"\n        //     )\n        //     .required('Required'),\n\n      }),\n      onSubmit: values => {// alert(JSON.stringify(values))\n        // dispatch(addNews(values))\n        // history.push('/')\n      },\n      children: props => /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: props.handleSubmit,\n        className: \"col-lg-1 col-offset-6 centered\",\n        children: [/*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"Title\",\n          name: \"title\",\n          type: \"text\",\n          onChange: props.handleChange,\n          value: props.values.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"Author\",\n          name: \"author\",\n          type: \"text\",\n          onChange: props.handleChange,\n          value: props.values.author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"Name\",\n          name: \"name\",\n          type: \"text\",\n          onChange: props.handleChange,\n          value: props.values.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"PublishedAt\",\n          name: \"publishedAt\",\n          type: \"date\",\n          onChange: props.handleChange,\n          value: props.values.publishedAt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 39\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"reset\",\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }, this), \",\", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          className: \"btn btn-primary\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 66\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 96\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 102\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s2(Edit, \"B7netXsQFJnp8DZJjrrifuwXUmU=\", false, function () {\n  return [useParams, useDispatch, useHistory];\n});\n\n_c2 = Edit;\n\nconst mapStateToProps = state => {\n  console.log('news', state.news);\n  return {\n    newsinfo: state.news.newsinfo\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getNews: id => dispatch(getNews(id))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Edit); // export default Edit\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyTextInput\");\n$RefreshReg$(_c2, \"Edit\");","map":{"version":3,"sources":["/home/botree/Desktop/Demoprojects/demoapp/src/components/Edit.js"],"names":["React","useEffect","Field","Form","Formik","useField","Yup","Link","useHistory","useParams","useDispatch","connect","addNews","getNews","useState","MyTextInput","label","props","field","meta","id","touched","error","color","Edit","newsinfo","console","log","dispatch","history","title","author","name","publishedAt","object","string","max","required","values","handleSubmit","handleChange","mapStateToProps","state","news","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { Field, Form, Formik, useField } from 'formik'\nimport * as Yup from 'yup'\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { useDispatch, connect } from 'react-redux';\nimport { addNews, getNews } from '../redux/Action';\n// import { useEffect } from 'react';\nimport { useState } from 'react';\n\nconst MyTextInput = ({ label, ...props }) => {\n    const [field, meta] = useField(props);\n    return (\n        <>\n            <label htmlFor={props.id || props.label}>{label}</label>\n            <input className=\"text-input\" {...field} {...props} />.\n            {/* {console.log('field are', { ...props })} */}\n            {meta.touched && meta.error ? (<div style={{ color: 'red' }} className=\"error\">{meta.error}</div>) : null}\n        </>\n    )\n}\n\n// const MySelect = ({ label, ...props }) => {\n//     const [field, meta] = useField(props);\n//     return (\n//         <div>\n//             <label htmlFor={props.id || props.name}>{label}</label>\n//             <select {...field} {...props} />\n//             {meta.touched && meta.error ? (<div style={{ color: 'red' }} className=\"error\">{meta.error}</div>) : null}\n//         </div>\n\n//     );\n// }\n\nconst Edit = ({newsinfo, getNews}) => {\n    // const newsinfo = useSelector(state => state.newsinfo)\n    console.log(\"news  in add component\", newsinfo);\n    const { id } = useParams();\n\n    // const {title, author,name, publishedAt} = newsinfo\n    // console.log('title is',title);\n    console.log('id from params', id);\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    \n    // console.log('props value',props);\n    // console.log('fields', field);\n\n    useEffect(() => {\n        if(newsinfo != null){\n            console.log('newsinfo',newsinfo);\n        }\n        dispatch(getNews(id))\n    },[])\n\n    return (\n        <>\n            <h1>Edit News</h1>\n            <Formik\n                initialValues={{\n                    title: '',\n                    author: '',\n                    name: '',\n                    publishedAt: '',\n                    // category: ''\n\n                }}\n                validationSchema={Yup.object({\n                    title: Yup.string()\n                        .max(20, 'Must be 15 characters or less')\n                        .required('Required'),\n                    author: Yup.string()\n                        .max(50, 'Must be 15 characters')\n                        .required('Required'),\n                    name: Yup.string()\n                        .required('Required'),\n                    publishedAt: Yup.string()\n                        .required('Required'),\n                    // category: Yup.string()\n                    //     .oneOf(\n                    //         [\"Software\", \"It\", \"Politics\", \"other\"],\n                    //         \"Invalid category Type\"\n                    //     )\n                    //     .required('Required'),\n\n\n                })}\n                onSubmit={(values) => {\n                    // alert(JSON.stringify(values))\n                    // dispatch(addNews(values))\n                    // history.push('/')\n                }}\n            >\n                {props => (\n\n                    <Form onSubmit={props.handleSubmit}\n                        className=\"col-lg-1 col-offset-6 centered\">\n                        <MyTextInput\n                            label=\"Title\"\n                            name=\"title\"\n                            type=\"text\"\n                            onChange={props.handleChange}\n                            value={props.values.title}\n\n                        /><br />\n\n                        <MyTextInput\n                            label=\"Author\"\n                            name=\"author\"\n                            type=\"text\"\n                            onChange={props.handleChange}\n                            value={props.values.author}\n                        /><br />\n\n                        <MyTextInput\n                            label=\"Name\"\n                            name=\"name\"\n                            type=\"text\"\n                            onChange={props.handleChange}\n                            value={props.values.name}\n                        /><br />\n\n                        <MyTextInput\n                            label=\"PublishedAt\"\n                            name=\"publishedAt\"\n                            type=\"date\"\n                            onChange={props.handleChange}\n                            value={props.values.publishedAt}\n                        /><br /><br /><br />\n\n                        {/* <MySelect label='Category' name='category'>\n                            <option value=\"\">Select a News type</option>\n                            <option value=\"Software\">Software</option>\n                            <option value=\"It\">It</option>\n                            <option value=\"Politics\">Politics</option>\n                            <option value=\"other\">Other</option>\n                        </MySelect><br /> */}\n\n                        <button type=\"submit\">Update</button>\n                        <button type=\"reset\">Reset</button>,\n                        <Link to='/' className=\"btn btn-primary\"><button>Cancel</button></Link><br /><br />\n                    </Form>\n                )}\n            </Formik>\n            <table className=\"table\">\n                {/* <thead>\n                    <tr>\n                        <th scope=\"col\">Title</th>\n                        <th scope=\"col\">Description</th>\n                        <th scope=\"col\">Created_date</th>\n                        <th scope=\"col\">Publisher</th>\n                        <th scope=\"col\">Category</th>\n\n                    </tr>\n                </thead> */}\n                {/* {newsdata.map((data,id) => {\n                    console.log(id)\n                    return (\n\n\n                        <tr key={id}>\n                            <td>{data.title}</td>\n                            <td>{data.description}</td>\n                            <td>{data.created_date}</td>\n                            <td>{data.publisher}</td>\n                            <td>{data.category}</td>\n                            <Link to = '/edit'></Link><button>Edit</button>\n                            <button>Delete</button>\n\n\n                        </tr>\n                    )\n\n                })} */}\n                <tbody>\n\n                </tbody>\n            </table>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    console.log('news', state.news);\n    return {\n        newsinfo: state.news.newsinfo\n\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getNews: (id) => dispatch(getNews(id))\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Edit)\n\n// export default Edit\n"]},"metadata":{},"sourceType":"module"}