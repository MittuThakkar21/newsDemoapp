{"ast":null,"code":"var _jsxFileName = \"/home/botree/Desktop/Demoprojects/demoapp/src/components/Edit.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { Form, Formik, useField } from 'formik';\nimport * as Yup from 'yup';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { getNews, updateNews } from '../redux/Action';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MyTextInput = ({\n  label,\n  ...props\n}) => {\n  _s();\n\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id || props.label,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"text-input\",\n      ...field,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), \".\", meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      className: \"error\",\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 44\n    }, this) : null]\n  }, void 0, true);\n}; // const MySelect = ({ label, ...props }) => {\n//     const [field, meta] = useField(props);\n//     return (\n//         <div>\n//             <label htmlFor={props.id || props.name}>{label}</label>\n//             <select {...field} {...props} />\n//             {meta.touched && meta.error ? (<div style={{ color: 'red' }} className=\"error\">{meta.error}</div>) : null}\n//         </div>\n//     );\n// }\n\n\n_s(MyTextInput, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c = MyTextInput;\n\nconst Edit = ({\n  location\n}) => {\n  _s2();\n\n  const news = location.news;\n  console.log(\"in edit component\");\n  const {\n    id\n  } = useParams();\n  const {\n    title,\n    author,\n    name,\n    publishedAt\n  } = news || {};\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const textRef = useRef(initialValue);\n\n  const getData = () => {\n    console.log('in get data');\n    dispatch(getNews(id));\n  };\n\n  const onupdate = e => {\n    console.log('in update');\n    e.preventDefault();\n    dispatch(updateNews({\n      title: textRef.current.value,\n      author: textRef.current.author,\n      name: textRef.current.name,\n      publishedAt: textRef.current.publishedAt\n    }));\n    console.log();\n    history.push('/');\n  }; // useEffect(() => {\n  //     // if(newsinfo != null){\n  //     // }\n  //     dispatch(getNews(id))\n  // },[])\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Edit News\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        title: title,\n        author: author,\n        name: name,\n        publishedAt: moment(publishedAt).format('YYYY-MM-DD')\n      },\n      validationSchema: Yup.object({\n        title: Yup.string().required('Required'),\n        author: Yup.string().max(50, 'Must be 15 characters').required('Required'),\n        name: Yup.string().required('Required'),\n        publishedAt: Yup.string().required('Required') // category: Yup.string()\n        //     .oneOf(\n        //         [\"Software\", \"It\", \"Politics\", \"other\"],\n        //         \"Invalid category Type\"\n        //     )\n        //     .required('Required'),\n\n      }),\n      onSubmit: values => {\n        alert(JSON.stringify(values));\n        onupdate; // history.push('/')\n        //     console.log()\n        //  const updated_data = {\n        //         title: values.title,\n        //         author: values.author,\n        //         name: values.name,\n        //         publishedAt: values.publishedAt\n        //     }\n        //     onupdate(updated_data)\n      },\n      children: props => /*#__PURE__*/_jsxDEV(Form, {\n        className: \"col-lg-1 col-offset-6 centered\",\n        children: [/*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"Title\",\n          name: \"title\",\n          type: \"text\",\n          ref: textRef,\n          value: props.values.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"Author\",\n          name: \"author\",\n          type: \"text\",\n          ref: textRef,\n          value: props.values.author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"Name\",\n          name: \"name\",\n          type: \"text\",\n          ref: textRef,\n          value: props.values.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"PublishedAt\",\n          name: \"publishedAt\",\n          type: \"date\",\n          value: props.values.publishedAt,\n          ref: textRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 39\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: getData,\n          type: \"submit\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          className: \"btn btn-primary\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 66\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 96\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 102\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s2(Edit, \"uTghUVm5y9kifHsxfVjFTK3NzGo=\", false, function () {\n  return [useParams, useDispatch, useHistory];\n});\n\n_c2 = Edit;\nexport default Edit;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyTextInput\");\n$RefreshReg$(_c2, \"Edit\");","map":{"version":3,"sources":["/home/botree/Desktop/Demoprojects/demoapp/src/components/Edit.js"],"names":["React","useRef","Form","Formik","useField","Yup","Link","useHistory","useParams","useDispatch","getNews","updateNews","moment","MyTextInput","label","props","field","meta","id","touched","error","color","Edit","location","news","console","log","title","author","name","publishedAt","dispatch","history","textRef","initialValue","getData","onupdate","e","preventDefault","current","value","push","format","object","string","required","max","values","alert","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react'\nimport { Form, Formik, useField } from 'formik'\nimport * as Yup from 'yup'\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { getNews, updateNews } from '../redux/Action';\nimport moment from 'moment';\n\nconst MyTextInput = ({ label, ...props }) => {\n    const [field, meta] = useField(props);\n    return (\n        <>\n            <label htmlFor={props.id || props.label}>{label}</label>\n            <input className=\"text-input\" {...field} {...props} />.\n            {meta.touched && meta.error ? (<div style={{ color: 'red' }} className=\"error\">{meta.error}</div>) : null}\n        </>\n    )\n}\n// const MySelect = ({ label, ...props }) => {\n//     const [field, meta] = useField(props);\n//     return (\n//         <div>\n//             <label htmlFor={props.id || props.name}>{label}</label>\n//             <select {...field} {...props} />\n//             {meta.touched && meta.error ? (<div style={{ color: 'red' }} className=\"error\">{meta.error}</div>) : null}\n//         </div>\n\n//     );\n// }\n\nconst Edit = ({ location }) => {\n    const news = location.news\n    console.log(\"in edit component\",);\n    const { id } = useParams();\n\n    const { title, author,name, publishedAt } = news || {}\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const textRef = useRef(initialValue)\n\n    const getData = () => {\n        console.log('in get data');\n        dispatch(getNews(id))\n    }\n\n    const onupdate = (e) => {\n        console.log('in update');\n        e.preventDefault();\n        \n        dispatch(updateNews({title: textRef.current.value,\n            author: textRef.current.author,\n            name: textRef.current.name,\n            publishedAt: textRef.current.publishedAt\n\n        }))\n        console.log()\n        history.push('/')\n\n    }\n\n    // useEffect(() => {\n    //     // if(newsinfo != null){\n\n    //     // }\n    //     dispatch(getNews(id))\n    // },[])\n\n\n    return (\n        <>\n            <h1>Edit News</h1>\n            <Formik\n                initialValues={{\n                    title: title,\n                    author: author,\n                    name: name,\n                    publishedAt: moment(publishedAt).format('YYYY-MM-DD'),\n\n                }}\n                validationSchema={Yup.object({\n                    title: Yup.string()\n                        .required('Required'),\n                    author: Yup.string()\n                        .max(50, 'Must be 15 characters')\n                        .required('Required'),\n                    name: Yup.string()\n                        .required('Required'),\n                    publishedAt: Yup.string()\n                        .required('Required'),\n                    // category: Yup.string()\n                    //     .oneOf(\n                    //         [\"Software\", \"It\", \"Politics\", \"other\"],\n                    //         \"Invalid category Type\"\n                    //     )\n                    //     .required('Required'),\n\n\n                })}\n                onSubmit={(values) => {\n                    alert(JSON.stringify(values))\n                    onupdate\n                    // history.push('/')\n\n\n                //     console.log()\n                //  const updated_data = {\n                //         title: values.title,\n                //         author: values.author,\n                //         name: values.name,\n                //         publishedAt: values.publishedAt\n                //     }\n                    \n                //     onupdate(updated_data)\n                }\n                }\n            >\n                {props => (\n\n                    <Form\n                        className=\"col-lg-1 col-offset-6 centered\">\n                        <MyTextInput\n                            label=\"Title\"\n                            name=\"title\"\n                            type=\"text\"\n                            ref={textRef}\n                            value={props.values.title}\n\n                        /><br />\n\n                        <MyTextInput\n                            label=\"Author\"\n                            name=\"author\"\n                            type=\"text\"\n                            ref={textRef}\n                            value={props.values.author}\n                        /><br />\n\n                        <MyTextInput\n                            label=\"Name\"\n                            name=\"name\"\n                            type=\"text\"\n                            ref={textRef}\n\n                            value={props.values.name}\n                        /><br />\n\n                        <MyTextInput\n                            label=\"PublishedAt\"\n                            name=\"publishedAt\"\n                            type=\"date\"\n                            value={props.values.publishedAt}\n                            ref={textRef}\n\n                        /><br /><br /><br />\n\n                        {/* <MySelect label='Category' name='category'>\n                            <option value=\"\">Select a News type</option>\n                            <option value=\"Software\">Software</option>\n                            <option value=\"It\">It</option>\n                            <option value=\"Politics\">Politics</option>\n                            <option value=\"other\">Other</option>\n                        </MySelect><br /> */}\n\n                        <button onClick={getData} type=\"submit\">Update</button>\n                        <Link to='/' className=\"btn btn-primary\"><button>Cancel</button></Link><br /><br />\n                    </Form>\n                )}\n            </Formik>\n            <table className=\"table\">\n                {/* <thead>\n                    <tr>\n                        <th scope=\"col\">Title</th>\n                        <th scope=\"col\">Description</th>\n                        <th scope=\"col\">Created_date</th>\n                        <th scope=\"col\">Publisher</th>\n                        <th scope=\"col\">Category</th>\n\n                    </tr>\n                </thead> */}\n                {/* {newsdata.map((data,id) => {\n                    console.log(id)\n                    return (\n\n\n                        <tr key={id}>\n                            <td>{data.title}</td>\n                            <td>{data.description}</td>\n                            <td>{data.created_date}</td>\n                            <td>{data.publisher}</td>\n                            <td>{data.category}</td>\n                            <Link to = '/edit'></Link><button>Edit</button>\n                            <button>Delete</button>\n\n\n                        </tr>\n                    )\n\n                })} */}\n                <tbody>\n\n                </tbody>\n            </table>\n        </>\n    )\n}\n\n\n\nexport default Edit\n"]},"metadata":{},"sourceType":"module"}